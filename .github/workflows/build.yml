---

name: Build

on:
  push:
    branches:
      - '**'
  pull_request:
  release:
    types: [edited, published]
  schedule:
    - cron: '0 10 * * *'  # everyday at 10am
  workflow_dispatch:
    inputs:
      dispatch-tag:
        description: "Tag to apply to pushed images"
        required: true
        default: dispatch

permissions:
  actions: read
  contents: read

jobs:
  config:
    name: "Config"
    uses: ./.github/workflows/_config.yml

  metadata:
    name: "Metadata"
    needs: [config]
    uses: ./.github/workflows/_metadata.yml
    with:
      image_name: ${{ needs.config.outputs.image_name }}

  docker-secrets:
    name: "Docker secrets"
    runs-on: ubuntu-latest
    steps:
      - name: Check docker.com credentials
        run: |
          return_code=0
          if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
            echo "::warning::Set the DOCKER_USERNAME secret."
            return_code=1
          fi
          if [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "::warning::Set the DOCKER_PASSWORD secret."
            return_code=1
          fi
          exit $return_code

  lint:
    name: "Lint"
    needs: [config]
    uses: ./.github/workflows/_lint.yml
    with:
      go_version: ${{ needs.config.outputs.go_version }}
      python_version: ${{ needs.config.outputs.python_version }}
      shfmt_version: ${{ needs.config.outputs.shfmt_version }}

  build-test-image:
    name: "Build test image"
    needs: [config, lint, metadata]
    uses: ./.github/workflows/_build-image.yml
    with:
      artifact_name: ${{ needs.config.outputs.test_image_artifact_name }}
      image_labels: ${{ needs.metadata.outputs.image_labels }}
      modify_dockerfile: true
      platforms: linux/amd64
    secrets:
      build_args: |
        VERSION=${{ needs.metadata.outputs.source_version }}

  test-image:
    name: "Test image"
    needs: [build-test-image, config]
    uses: ./.github/workflows/_test-image.yml
    with:
      data_artifact_name: ${{ needs.config.outputs.data_artifact_name }}
      data_artifact_path: ${{ needs.config.outputs.data_artifact_path }}
      image_artifact_name: ${{ needs.config.outputs.test_image_artifact_name }}

  build-each-platform:
    needs: [config, docker-secrets, lint, metadata, test-image]
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        platform: ${{ fromJson(needs.config.outputs.platforms_json) }}
    name: "${{ matrix.platform }}"
    uses: ./.github/workflows/_build-image.yml
    with:
      image_labels: ${{ needs.metadata.outputs.image_labels }}
      image_tags: ${{ needs.config.outputs.image_name }}:cache-ignore
      modify_dockerfile: true
      platforms: ${{ matrix.platform }}
      # TODO: Disable push and remove Docker credentials when issue resolved:
      # https://github.com/moby/buildkit/issues/2887
      push: true
    secrets:
      build_args: |
        VERSION=${{ needs.metadata.outputs.source_version }}
      docker_password: ${{ secrets.DOCKER_PASSWORD }}
      docker_username: ${{ secrets.DOCKER_USERNAME }}

  build-multi-platform-image:
    needs: [build-each-platform, config, docker-secrets, lint, metadata, test-image]
    if: github.event_name != 'pull_request'
    name: "Multi-platform"
    permissions:
      packages: write
    uses: ./.github/workflows/_build-image.yml
    with:
      image_labels: ${{ needs.metadata.outputs.image_labels }}
      image_tags: ${{ needs.metadata.outputs.image_tags }}
      modify_dockerfile: true
      platforms: ${{ needs.config.outputs.platforms }}
      push: true
    secrets:
      build_args: |
        VERSION=${{ needs.metadata.outputs.source_version }}
      docker_password: ${{ secrets.DOCKER_PASSWORD }}
      docker_username: ${{ secrets.DOCKER_USERNAME }}

  publish-readme:
    needs: [build-multi-platform-image]
    if: github.event_name == 'release' && !github.event.release.prerelease
    name: "Publish docs"
    uses: ./.github/workflows/_publish-readme.yml
    with:
      image_name: ${{ needs.config.outputs.image_name }}
    secrets:
      docker_password: ${{ secrets.DOCKER_PASSWORD }}
      docker_username: ${{ secrets.DOCKER_USERNAME }}
