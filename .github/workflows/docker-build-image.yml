---
name: "Build image"

# This reusable workflow builds Docker images.  It allows images to be pushed to
# the Docker Hub and GitHub Container Registry, or uploaded as an artifact for
# later use by other workflows.
#
# Additional workflow features include:
# - Caching of Docker layers to Github Actions cache
# - Optional encryption of Docker images stored as artifacts
# - Ability to suffix tags with additional information. For example, adding the
#   platform identifier so the image can be later included in a multi-platform
#   manifest.

on:
  workflow_call:
    inputs:
      # Required inputs
      platforms:
        description: "The platform(s) to build (CSV)"
        required: true
        type: string
      # Optional inputs
      artifact_name:
        description: "Upload the image archive as an artifact if specified"
        required: false
        type: string
      artifact_retention_days:
        default: 1
        description: "Number of days to retain the artifact"
        required: false
        type: number
      cache_scope:
        default: "buildkit"
        description: "The scope to use for GitHub Action Cache (name will be cleaned)"
        required: false
        type: string
      docker_file:
        default: ./Dockerfile
        description: "The Dockerfile to use"
        required: false
        type: string
      image_labels:
        description: "Image labels to apply to the image"
        required: false
        type: string
      image_tags:
        default: local/test-image:latest
        description: "The tags to apply to the image"
        required: false
        type: string
      image_tarball_name:
        default: image.tar
        description: "The name of the image tarball (name will be cleaned)"
        required: false
        type: string
      preload_artifact_name:
        description: "Preload images from tarballs in the specified artifact"
        required: false
        type: string
      push:
        default: false
        description: "Push the image to the registries (disables artifact upload)"
        required: false
        type: boolean
      tag_suffix:
        default: ""
        description: "Suffix to append to the image tags and cache scope (name will be cleaned)"
        required: false
        type: string
    secrets:
      artifact_key:
        description: "Enables encryption of the image archive if specified"
        required: false
      build_args:
        description: "Build args to pass to the Dockerfile"
        required: false
      docker_password:
        description: "The password for the Docker hub account (required for push)"
        required: false
      docker_username:
        description: "The username for the Docker hub account (required for push)"
        required: false
      preload_artifact_key:
        description: "Enables decryption of the preload artifact image tarballs if specified"
        required: false

env:
  OUTPUT_ARTIFACT_WORK_DIR: /tmp/output-artifact-work
  PRELOAD_ARTIFACT_WORK_DIR: /tmp/preload-artifact-work

jobs:
  build-image:
    name: "Build image"
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@2e205a28d0e1da00c5f53b161f4067b052c61f34
        with:
          # TODO: change to 'egress-policy: block' after couple of runs
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8

      - name: Set up QEMU
        uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@8c0edbc76e98fa90f69d9a2c020dcb50019dc325

      - name: Docker credentials available for push
        if: inputs.push == true
        run: |
          return_code=0
          if [ -z "${{ secrets.docker_username }}" ]; then
            echo "::warning::Set the docker_username secret when using push=true."
            return_code=1
          fi
          if [ -z "${{ secrets.docker_password }}" ]; then
            echo "::warning::Set the docker_password secret when using push=true."
            return_code=1
          fi
          exit $return_code

      - name: Login to Docker Hub
        if: inputs.push == true
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.docker_username }}
          password: ${{ secrets.docker_password }}

      - name: Login to GitHub Container Registry
        if: inputs.push == true
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create directories for artifact work
        run: |
          mkdir -p ${{ env.OUTPUT_ARTIFACT_WORK_DIR }}
          mkdir -p ${{ env.PRELOAD_ARTIFACT_WORK_DIR }}

      - name: Clean variables
        id: clean
        run: |
          # Replace illegal characters in cache scope
          echo cache_scope=$(echo "${{ inputs.cache_scope }}" | sed -e 's/[^a-zA-Z0-9._-]/_/g') >> $GITHUB_OUTPUT
          # Replace illegal characters in image tarball name
          echo image_tarball_name=$(echo "${{ inputs.image_tarball_name }}" | sed -e 's/[^a-zA-Z0-9._-]/_/g') >> $GITHUB_OUTPUT
          # Replace illegal characters in tag suffix
          echo suffix=$(echo "${{ inputs.tag_suffix }}" | sed -e 's/[^a-zA-Z0-9._-]/_/g') >> $GITHUB_OUTPUT

      - name: Add suffix to image tags
        id: tag_suffix
        run: |
          delimiter="$(openssl rand -hex 8)"
          echo "tags<<${delimiter}" >> $GITHUB_OUTPUT
          # if tag_suffix is set, append it to each tag
          if [[ -n "${{ inputs.tag_suffix }}" ]]; then
            echo "${{ inputs.image_tags }}" | sed -e "s/$/-${{ steps.clean.outputs.suffix }}/" >> $GITHUB_OUTPUT
          else
            echo "${{ inputs.image_tags }}" >> $GITHUB_OUTPUT
          fi
          echo "${delimiter}" >> $GITHUB_OUTPUT

      - name: Check if preload artifact key is available
        id: check_preload_artifact_key
        run: |
          if [ -n "${{ secrets.preload_artifact_key }}" ]; then
            echo "do_decryption=true" >> $GITHUB_OUTPUT
          else
            echo "do_decryption=false" >> $GITHUB_OUTPUT
          fi

      - name: Download image artifact tarballs for preload
        if: inputs.preload_artifact_name != ''
        uses: actions/download-artifact@9782bd6a9848b53b110e712e20e42d89988822b7
        with:
          name: ${{ inputs.preload_artifact_name }}
          path: ${{ env.PRELOAD_ARTIFACT_WORK_DIR }}

      - name: Load unencrypted images
        if: ${{ inputs.preload_artifact_name != '' && steps.check_preload_artifact_key.outputs.do_decryption == 'false' }}
        run: |
          for tarball in ${{ env.PRELOAD_ARTIFACT_WORK_DIR }}/*.tar; do
            echo "Loading ${tarball}"
            docker load -i "${tarball}"
          done

      - name: Load encrypted images
        if: ${{ inputs.preload_artifact_name != '' && steps.check_preload_artifact_key.outputs.do_decryption == 'true' }}
        run: |
          for tarball in ${{ env.PRELOAD_ARTIFACT_WORK_DIR }}/*.tar.7z; do
            echo "Loading ${tarball}"
            7za x -p${{ secrets.preload_artifact_key }} -so "${tarball}" | docker load
          done

      - name: Build image for push
        if: inputs.push == true
        uses: docker/build-push-action@c56af957549030174b10d6867f20e78cfd7debc5
        with:
          build-args: ${{ secrets.build_args }}
          cache-from: type=gha,scope=${{ steps.clean.outputs.cache_scope }}
          cache-to: type=gha,mode=max,scope=${{ steps.clean.outputs.cache_scope }}
          context: .
          file: ${{ inputs.docker_file}}
          labels: ${{ inputs.image_labels }}
          platforms: ${{ inputs.platforms }}
          push: true
          tags: ${{ steps.tag_suffix.outputs.tags }}

      - name: Build image for archive
        if: inputs.push != true
        uses: docker/build-push-action@c56af957549030174b10d6867f20e78cfd7debc5
        with:
          build-args: ${{ secrets.build_args }}
          cache-from: type=gha,scope=${{ steps.clean.outputs.cache_scope }}
          cache-to: type=gha,mode=max,scope=${{ steps.clean.outputs.cache_scope }}
          context: .
          file: ${{ inputs.docker_file}}
          labels: ${{ inputs.image_labels }}
          outputs: type=docker,dest=${{ env.OUTPUT_ARTIFACT_WORK_DIR }}/${{ steps.clean.outputs.image_tarball_name }}
          platforms: ${{ inputs.platforms }}
          push: false
          tags: ${{ steps.tag_suffix.outputs.tags }}

      - name: Check if artifact key is available
        id: check_artifact_key
        if: inputs.push != true
        run: |
          if [ -n "${{ secrets.artifact_key }}" ]; then
            echo "do_encryption=true" >> $GITHUB_OUTPUT
            echo "file_name=${{ steps.clean.outputs.image_tarball_name }}.7z" >> $GITHUB_OUTPUT
          else
            echo "do_encryption=false" >> $GITHUB_OUTPUT
            echo "file_name=${{ steps.clean.outputs.image_tarball_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Encrypt image archive
        if: ${{ (inputs.push == false) && (steps.check_artifact_key.outputs.do_encryption == true) }}
        run: |
          7za a -p${{ secrets.artifact_key }} \
          ${{ env.OUTPUT_ARTIFACT_WORK_DIR }}/${{ steps.clean.outputs.image_tarball_name }}.7z \
          ${{ env.OUTPUT_ARTIFACT_WORK_DIR }}/${{ steps.clean.outputs.image_tarball_name }}

      - name: Upload artifacts
        if: ${{ (inputs.push == false) && (inputs.artifact_name != '') }}
        uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb
        with:
          name: ${{ inputs.artifact_name }}
          path: ${{ env.OUTPUT_ARTIFACT_WORK_DIR }}/${{ steps.check_artifact_key.outputs.file_name }}
          retention-days: ${{ inputs.artifact_retention_days }}
