---
name: Test Docker image

on:
  workflow_call:
    inputs:
      # Required inputs
      image_artifact_name:
        description: "The artifact name used to load the image archive"
        required: true
        type: string
      data_artifact_name:
        description: "The artifact name used to store the data archive"
        required: true
        type: string
      # Optional inputs
      data_artifact_path:
        description: "The artifact path used to create the data archive"
        default: data
        required: false
        type: string
      pip_cache_dir:
        description: "The pip cache directory"
        default: ~/.cache/pip
        required: false
        type: string
      python_version:
        description: "The Python version to use"
        default: '3.10'
        required: false
        type: string
    secrets:
      data_artifact_key:
        description: "Enables encryption of the data artifact if specified"
        required: false
      image_artifact_key:
        description: "Enables decryption of the image artifact if specified"
        required: false


env:
  PIP_CACHE_DIR: ${{ inputs.pip_cache_dir }}
  ARTIFACT_WORK_DIR: /tmp/artifact-work

jobs:
  test:
    # Executes tests on the single-platform image created in the "build" job.
    name: "Test image"
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@2e205a28d0e1da00c5f53b161f4067b052c61f34
        with:
          # TODO: change to 'egress-policy: block' after couple of runs
          egress-policy: audit
      - name: Check if data artifact key is available
        id: check_data_artifact_key
        run: |
          if [ -n "${{ secrets.data_artifact_key }}" ]; then
            echo "do_encryption=true" >> $GITHUB_OUTPUT
          else
            echo "do_encryption=false" >> $GITHUB_OUTPUT
          fi
      - name: Check if image artifact key is available
        id: check_image_artifact_key
        run: |
          if [ -n "${{ secrets.image_artifact_key }}" ]; then
            echo "do_encryption=true" >> $GITHUB_OUTPUT
          else
            echo "do_encryption=false" >> $GITHUB_OUTPUT
          fi
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8
      - id: setup-python
        uses: actions/setup-python@13ae5bb136fac2878aff31522b9efb785519f984
        with:
          python-version: ${{ inputs.python_version }}
      - name: Cache testing environments
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7
        env:
          BASE_CACHE_KEY: "${{ github.job }}-${{ runner.os }}-\
            py${{ steps.setup-python.outputs.python-version }}-"
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: "${{ env.BASE_CACHE_KEY }}\
            ${{ hashFiles('**/requirements-test.txt') }}-\
            ${{ hashFiles('**/requirements.txt') }}"
          restore-keys: |
            ${{ env.BASE_CACHE_KEY }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade --requirement requirements-test.txt
      - name: Download docker image artifact
        uses: actions/download-artifact@9782bd6a9848b53b110e712e20e42d89988822b7
        with:
          name: ${{ inputs.image_artifact_name }}
          path: ${{ env.ARTIFACT_WORK_DIR }}
      - name: Load unencrypted image
        if: steps.check_image_artifact_key.outputs.do_encryption == 'false'
        run: |
          docker load < ${{ env.ARTIFACT_WORK_DIR }}/image.tar
      - name: Load encrypted image
        if: steps.check_image_artifact_key.outputs.do_encryption == 'true'
        run: |
          7za x -p${{ secrets.image_artifact_key }} -so \
          ${{ env.ARTIFACT_WORK_DIR }}/image.tar.7z | docker load
      - name: Set data directory permissions
        run: |
          chmod a+rwx ${{ inputs.data_artifact_path }}
      - name: Run tests
        env:
          PYTHONUNBUFFERED: 1
          RELEASE_TAG: ${{ github.event.release.tag_name }}
        run: |
          set -o pipefail
          pytest | tee ${{ inputs.data_artifact_path }}/pytests.log
      - name: Compress data directory unencrypted
        if: steps.check_data_artifact_key.outputs.do_encryption == 'false'
        run: |
          tar cf data.tar.gz ${{ inputs.data_artifact_path }}
      - name: Compress and encrypt data directory
        if: steps.check_data_artifact_key.outputs.do_encryption == 'true'
        run: |
          tar cf - ${{ inputs.data_artifact_path }} | \
          7za a -p${{ secrets.data_artifact_key }} -si data.tar.7z
      - name: Upload unencrypted data artifacts
        if: steps.check_data_artifact_key.outputs.do_encryption == 'false'
        uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb
        with:
          name: ${{ inputs.data_artifact_name }}
          path: data.tar.gz
      - name: Upload encrypted data artifacts
        if: steps.check_data_artifact_key.outputs.do_encryption == 'true'
        uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb
        with:
          name: ${{ inputs.data_artifact_name }}
          path: data.tar.7z
